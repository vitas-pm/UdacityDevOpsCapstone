version: 2.1

commands:
  rollback:
    steps:
      - run:
          name: Check versions
          when: on_fail
          command: |
            image=$(kubectl get deployment browser-game --cluster=Test -o custom-columns=IMAGE:.spec.template.spec.containers[0].image | tail -1)
            deployed_version="${image:31}"
            echo "$deployed_version" > rollback_version.txt
            echo "rolling back to $deployed_version"
      - run:
          name: rollback
          when: on_fail
          command: |
            old=$(cat old_version.txt)
            new=$(cat rollback_version)
            if [[ "${old}" != "${new}" ]]
            then
              chmod +x revert_update.sh
              ./revert_update.sh
            else
              echo "Rollback not necessary"
            fi


jobs:
  build:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/UdacityDevOpsCapstone/
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.venv
            . ~/.venv/bin/activate
            make requirements
            make dependencies
      - save_cache:
          paths:
            - ~/.venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . ~/.venv/bin/activate
            make lint
  docker:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: ~/UdacityDevOpsCapstone/
    steps:
      - checkout
      - run:
          name: Install aws
          command: |
            pip install awscli
      - run:
          name: Install docker and kubectl
          command: |
            apk update
            apk add --update curl bash docker
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: get current version
          command: |
            aws eks update-kubeconfig --region us-east-1 --name Test --alias Test
            kubectl config get-contexts
            image=$(kubectl get deployment browser-game --namespace=game -o custom-columns=IMAGE:.spec.template.spec.containers[0].image | tail -1)
            echo "$image"
            version="${image:31}"
            echo "$version"
            echo "$version" > version.txt
            echo "$version" > old_version.txt
      - run:
          name: build new docker and upload
          command: |
            chmod +x run_docker.sh
            ./run_docker.sh
            chmod +x increase_version.sh
            ./increase_version.sh
            ver=$(cat version.txt)
            chmod +x upload_docker.sh
            ./upload_docker.sh "$ver"
      - persist_to_workspace:
          root: ~/
          paths:
            - version.txt
            - old_version.txt

  kubernetes:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/UdacityDevOpsCapstone/
    steps:
      - checkout
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - attach_workspace:
          at: ~/
      - run:
          name: deploy kubernetes pod
          command: |
            aws eks update-kubeconfig --region us-east-1 --name Test --alias Test
            kubectl config get-contexts
            ver=$(cat version.txt)
            echo "deploying $ver"
            chmod +x rolling_update.sh
            ./rolling_update.sh "$ver"
      - run:
          name: smoke test
          command: |
            URL="http://a46c52c67777a4d6dbe5a07753422687-1870156947.us-east-1.elb.amazonaws.com/version"
            echo ${URL}
            version_online=$(curl "$URL")
            deployed_version=$(cat version.txt)
            if [[ "${version_online}" == "${deployed_version}" ]]
            then
              return 0
            else
              return 1
            fi
      - rollback

workflows:
  game_update:
    jobs:
      #- build
      - docker
#          requires:
#            - build
      - kubernetes:
          requires:
            - docker
